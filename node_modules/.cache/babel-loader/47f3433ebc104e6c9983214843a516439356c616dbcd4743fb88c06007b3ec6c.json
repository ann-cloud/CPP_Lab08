{"ast":null,"code":"import { createStore } from 'vuex';\nconst store = createStore({\n  state() {\n    return {\n      authenticated: false,\n      userId: \"\",\n      username: \"\",\n      email: \"\",\n      accessToken: \"\"\n    };\n  },\n  mutations: {\n    setAuthenticated(state, value) {\n      state.authenticated = value;\n    },\n    setUserId(state, value) {\n      state.userId = value;\n    },\n    setUsername(state, value) {\n      state.username = value;\n    },\n    setEmail(state, value) {\n      state.email = value;\n    },\n    setAccessToken(state, value) {\n      localStorage.setItem(\"accessToken\", value);\n      state.accessToken = value;\n    }\n  },\n  actions: {\n    authenticate({\n      commit\n    }, {\n      authenticated,\n      userId,\n      username,\n      email,\n      accessToken\n    }) {\n      commit('setAuthenticated', authenticated);\n      commit('setUserId', userId);\n      commit('setUsername', username);\n      commit('setEmail', email);\n      commit('setAccessToken', accessToken);\n    }\n  },\n  getters: {\n    isAuthenticated: state => {\n      // let tmpToken = localStorage.getItem(\"accessToken\");\n      // if(tmpToken != null)\n      // {\n      //   state.accessToken = tmpToken;\n      //   state.authenticated = true;\n      // }\n      return state.authenticated;\n    },\n    getUserId: state => state.userId,\n    getUsername: state => state.username,\n    getEmail: state => state.email,\n    getAccessToken: state => {\n      let tmpToken = localStorage.getItem(\"accessToken\");\n      if (tmpToken != null) state.accessToken = tmpToken;\n      return state.accessToken;\n    }\n  }\n});\nexport default store;","map":{"version":3,"names":["createStore","store","state","authenticated","userId","username","email","accessToken","mutations","setAuthenticated","value","setUserId","setUsername","setEmail","setAccessToken","localStorage","setItem","actions","authenticate","commit","getters","isAuthenticated","getUserId","getUsername","getEmail","getAccessToken","tmpToken","getItem"],"sources":["C:/Users/admin/source/repos/COMMAND/CPP_Lab08/src/store.js"],"sourcesContent":["import { createStore } from 'vuex'\r\n\r\nconst store = createStore({\r\n    state() {\r\n      return {\r\n        authenticated: false,\r\n        userId: \"\",\r\n        username: \"\",\r\n        email: \"\",\r\n        accessToken: \"\"\r\n      };\r\n    },\r\n    mutations: {\r\n      setAuthenticated(state, value) {\r\n        state.authenticated = value;\r\n      },\r\n      setUserId(state, value) {\r\n        state.userId = value;\r\n      },\r\n      setUsername(state, value) {\r\n        state.username = value;\r\n      },\r\n      setEmail(state, value)\r\n      {\r\n        state.email = value;\r\n      },\r\n      setAccessToken(state, value) {\r\n        localStorage.setItem(\"accessToken\", value);\r\n        state.accessToken = value;\r\n      }\r\n    },\r\n    actions: {\r\n        authenticate({ commit }, { authenticated, userId, username, email, accessToken }) {\r\n          commit('setAuthenticated', authenticated);\r\n          commit('setUserId', userId);\r\n          commit('setUsername', username);\r\n          commit('setEmail', email);\r\n          commit('setAccessToken', accessToken);\r\n        },\r\n      },\r\n    getters: {\r\n      isAuthenticated: (state) => {\r\n        // let tmpToken = localStorage.getItem(\"accessToken\");\r\n        // if(tmpToken != null)\r\n        // {\r\n        //   state.accessToken = tmpToken;\r\n        //   state.authenticated = true;\r\n        // }\r\n        return state.authenticated;\r\n      },\r\n      getUserId: (state) => state.userId,\r\n      getUsername: (state) => state.username,\r\n      getEmail: (state) => state.email,\r\n      getAccessToken: (state) => {\r\n        let tmpToken = localStorage.getItem(\"accessToken\");\r\n        if(tmpToken != null)\r\n          state.accessToken = tmpToken;\r\n        return state.accessToken;\r\n      }\r\n       \r\n    },\r\n  });  \r\n\r\nexport default store"],"mappings":"AAAA,SAASA,WAAW,QAAQ,MAAM;AAElC,MAAMC,KAAK,GAAGD,WAAW,CAAC;EACtBE,KAAKA,CAAA,EAAG;IACN,OAAO;MACLC,aAAa,EAAE,KAAK;MACpBC,MAAM,EAAE,EAAE;MACVC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,EAAE;MACTC,WAAW,EAAE;IACf,CAAC;EACH,CAAC;EACDC,SAAS,EAAE;IACTC,gBAAgBA,CAACP,KAAK,EAAEQ,KAAK,EAAE;MAC7BR,KAAK,CAACC,aAAa,GAAGO,KAAK;IAC7B,CAAC;IACDC,SAASA,CAACT,KAAK,EAAEQ,KAAK,EAAE;MACtBR,KAAK,CAACE,MAAM,GAAGM,KAAK;IACtB,CAAC;IACDE,WAAWA,CAACV,KAAK,EAAEQ,KAAK,EAAE;MACxBR,KAAK,CAACG,QAAQ,GAAGK,KAAK;IACxB,CAAC;IACDG,QAAQA,CAACX,KAAK,EAAEQ,KAAK,EACrB;MACER,KAAK,CAACI,KAAK,GAAGI,KAAK;IACrB,CAAC;IACDI,cAAcA,CAACZ,KAAK,EAAEQ,KAAK,EAAE;MAC3BK,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEN,KAAK,CAAC;MAC1CR,KAAK,CAACK,WAAW,GAAGG,KAAK;IAC3B;EACF,CAAC;EACDO,OAAO,EAAE;IACLC,YAAYA,CAAC;MAAEC;IAAO,CAAC,EAAE;MAAEhB,aAAa;MAAEC,MAAM;MAAEC,QAAQ;MAAEC,KAAK;MAAEC;IAAY,CAAC,EAAE;MAChFY,MAAM,CAAC,kBAAkB,EAAEhB,aAAa,CAAC;MACzCgB,MAAM,CAAC,WAAW,EAAEf,MAAM,CAAC;MAC3Be,MAAM,CAAC,aAAa,EAAEd,QAAQ,CAAC;MAC/Bc,MAAM,CAAC,UAAU,EAAEb,KAAK,CAAC;MACzBa,MAAM,CAAC,gBAAgB,EAAEZ,WAAW,CAAC;IACvC;EACF,CAAC;EACHa,OAAO,EAAE;IACPC,eAAe,EAAGnB,KAAK,IAAK;MAC1B;MACA;MACA;MACA;MACA;MACA;MACA,OAAOA,KAAK,CAACC,aAAa;IAC5B,CAAC;IACDmB,SAAS,EAAGpB,KAAK,IAAKA,KAAK,CAACE,MAAM;IAClCmB,WAAW,EAAGrB,KAAK,IAAKA,KAAK,CAACG,QAAQ;IACtCmB,QAAQ,EAAGtB,KAAK,IAAKA,KAAK,CAACI,KAAK;IAChCmB,cAAc,EAAGvB,KAAK,IAAK;MACzB,IAAIwB,QAAQ,GAAGX,YAAY,CAACY,OAAO,CAAC,aAAa,CAAC;MAClD,IAAGD,QAAQ,IAAI,IAAI,EACjBxB,KAAK,CAACK,WAAW,GAAGmB,QAAQ;MAC9B,OAAOxB,KAAK,CAACK,WAAW;IAC1B;EAEF;AACF,CAAC,CAAC;AAEJ,eAAeN,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}