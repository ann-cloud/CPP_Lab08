{"ast":null,"code":"import { createApp } from 'vue';\nimport App from './App.vue';\nimport { createRouter, createWebHashHistory } from 'vue-router';\nimport store from '@\"/store';\nimport axios from 'axios';\nimport ModalLogin from '@/./components/Authorization/ModalLogin.vue';\nimport ModalRegister from '@/./components/Authorization/ModalRegister.vue';\nimport HomeContent from '@/./components/Home/HomeContent.vue';\nimport ProfileContent from '@/./components/Profile/ProfileContent.vue';\nconst routes = [{\n  path: '/',\n  component: HomeContent,\n  beforeEnter: (to, from, next) => {\n    if (store.getters.isAuthenticated) {\n      let userId = store.getters.getUserId;\n      if (userId !== undefined && !isNaN(userId) && userId != null) {\n        console.log(userId);\n        const promise = axios.get('http://localhost:8080/api/auth/users/' + userId);\n\n        // using .then, create a new promise which extracts the data\n        promise.then(response => {\n          const userId = response.data.id;\n          const username = response.data.username;\n          const email = response.data.email;\n          store.dispatch('authenticate', {\n            authenticated: true,\n            userId,\n            username,\n            email\n          });\n        });\n      }\n      next();\n    }\n  }\n}, {\n  path: '/sign-in',\n  component: ModalLogin\n}, {\n  path: '/sign-up',\n  component: ModalRegister\n}, {\n  path: '/profile',\n  component: ProfileContent,\n  meta: {\n    requiresAuth: true\n  }\n  //   beforeEnter: (to, from, next) => {\n  //     if (store.getters.isAuthenticated) {\n  //       let userId = store.getters.getUserId;\n\n  //       try {\n  //         if (userId !== undefined && !isNaN(userId) && userId != null) {\n  //           const promise = axios.get('http://localhost:8080/api/auth/users/' + userId);\n\n  //           // using .then, create a new promise which extracts the data\n  //           promise.then((response) => {\n\n  //             const userId = response.data.id;\n  //             const username = response.data.username;\n  //             const email = response.data.email;\n\n  //             store.dispatch('authenticate', {\n  //               authenticated: true,\n  //               userId,\n  //               username,\n  //               email,\n  //             });\n  //           })\n  //         }\n  //       } catch (error) {\n  //         console.log(error);\n  //       }\n  //   } else {\n  //     alert('You need to log in first ðŸ¤“');\n  //       next('/sign-in');\n  //   }\n  // },\n}];\n\nconst router = createRouter({\n  history: createWebHashHistory(),\n  routes\n});\ncreateApp(App).use(router).use(store).mount('#app');","map":{"version":3,"names":["createApp","App","createRouter","createWebHashHistory","store","axios","ModalLogin","ModalRegister","HomeContent","ProfileContent","routes","path","component","beforeEnter","to","from","next","getters","isAuthenticated","userId","getUserId","undefined","isNaN","console","log","promise","get","then","response","data","id","username","email","dispatch","authenticated","meta","requiresAuth","router","history","use","mount"],"sources":["C:/Users/admin/source/repos/COMMAND/CPP_Lab08/src/main.js"],"sourcesContent":["import { createApp } from 'vue'\r\nimport App from './App.vue'\r\nimport { createRouter, createWebHashHistory } from 'vue-router'\r\nimport store from '@\"/store'\r\nimport axios from 'axios';\r\n\r\nimport ModalLogin from '@/./components/Authorization/ModalLogin.vue';\r\nimport ModalRegister from '@/./components/Authorization/ModalRegister.vue';\r\nimport HomeContent from '@/./components/Home/HomeContent.vue';\r\nimport ProfileContent from '@/./components/Profile/ProfileContent.vue';\r\n\r\nconst routes = [\r\n  {\r\n    path: '/', component: HomeContent,\r\n    beforeEnter: (to, from, next) => {\r\n      if (store.getters.isAuthenticated) {\r\n        let userId = store.getters.getUserId;\r\n\r\n        if (userId !== undefined && !isNaN(userId) && userId != null) {\r\n          console.log(userId);\r\n          const promise = axios.get('http://localhost:8080/api/auth/users/' + userId);\r\n\r\n          // using .then, create a new promise which extracts the data\r\n          promise.then((response) => {\r\n\r\n            const userId = response.data.id;\r\n            const username = response.data.username;\r\n            const email = response.data.email;\r\n\r\n            store.dispatch('authenticate', {\r\n              authenticated: true,\r\n              userId,\r\n              username,\r\n              email,\r\n            });\r\n          })\r\n        }\r\n        next();\r\n      }\r\n    }\r\n  },\r\n  { path: '/sign-in', component: ModalLogin },\r\n  { path: '/sign-up', component: ModalRegister },\r\n  {\r\n    path: '/profile',\r\n    component: ProfileContent,\r\n    meta: { requiresAuth: true },\r\n    //   beforeEnter: (to, from, next) => {\r\n    //     if (store.getters.isAuthenticated) {\r\n    //       let userId = store.getters.getUserId;\r\n\r\n    //       try {\r\n    //         if (userId !== undefined && !isNaN(userId) && userId != null) {\r\n    //           const promise = axios.get('http://localhost:8080/api/auth/users/' + userId);\r\n\r\n    //           // using .then, create a new promise which extracts the data\r\n    //           promise.then((response) => {\r\n\r\n    //             const userId = response.data.id;\r\n    //             const username = response.data.username;\r\n    //             const email = response.data.email;\r\n\r\n    //             store.dispatch('authenticate', {\r\n    //               authenticated: true,\r\n    //               userId,\r\n    //               username,\r\n    //               email,\r\n    //             });\r\n    //           })\r\n    //         }\r\n    //       } catch (error) {\r\n    //         console.log(error);\r\n    //       }\r\n    //   } else {\r\n    //     alert('You need to log in first ðŸ¤“');\r\n    //       next('/sign-in');\r\n    //   }\r\n    // },\r\n  },\r\n];\r\n\r\nconst router = createRouter({\r\n  history: createWebHashHistory(),\r\n  routes,\r\n});\r\n\r\n\r\ncreateApp(App)\r\n  .use(router)\r\n  .use(store)\r\n  .mount('#app')\r\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,KAAK;AAC/B,OAAOC,GAAG,MAAM,WAAW;AAC3B,SAASC,YAAY,EAAEC,oBAAoB,QAAQ,YAAY;AAC/D,OAAOC,KAAK,MAAM,UAAU;AAC5B,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAOC,UAAU,MAAM,6CAA6C;AACpE,OAAOC,aAAa,MAAM,gDAAgD;AAC1E,OAAOC,WAAW,MAAM,qCAAqC;AAC7D,OAAOC,cAAc,MAAM,2CAA2C;AAEtE,MAAMC,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,GAAG;EAAEC,SAAS,EAAEJ,WAAW;EACjCK,WAAW,EAAEA,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;IAC/B,IAAIZ,KAAK,CAACa,OAAO,CAACC,eAAe,EAAE;MACjC,IAAIC,MAAM,GAAGf,KAAK,CAACa,OAAO,CAACG,SAAS;MAEpC,IAAID,MAAM,KAAKE,SAAS,IAAI,CAACC,KAAK,CAACH,MAAM,CAAC,IAAIA,MAAM,IAAI,IAAI,EAAE;QAC5DI,OAAO,CAACC,GAAG,CAACL,MAAM,CAAC;QACnB,MAAMM,OAAO,GAAGpB,KAAK,CAACqB,GAAG,CAAC,uCAAuC,GAAGP,MAAM,CAAC;;QAE3E;QACAM,OAAO,CAACE,IAAI,CAAEC,QAAQ,IAAK;UAEzB,MAAMT,MAAM,GAAGS,QAAQ,CAACC,IAAI,CAACC,EAAE;UAC/B,MAAMC,QAAQ,GAAGH,QAAQ,CAACC,IAAI,CAACE,QAAQ;UACvC,MAAMC,KAAK,GAAGJ,QAAQ,CAACC,IAAI,CAACG,KAAK;UAEjC5B,KAAK,CAAC6B,QAAQ,CAAC,cAAc,EAAE;YAC7BC,aAAa,EAAE,IAAI;YACnBf,MAAM;YACNY,QAAQ;YACRC;UACF,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ;MACAhB,IAAI,CAAC,CAAC;IACR;EACF;AACF,CAAC,EACD;EAAEL,IAAI,EAAE,UAAU;EAAEC,SAAS,EAAEN;AAAW,CAAC,EAC3C;EAAEK,IAAI,EAAE,UAAU;EAAEC,SAAS,EAAEL;AAAc,CAAC,EAC9C;EACEI,IAAI,EAAE,UAAU;EAChBC,SAAS,EAAEH,cAAc;EACzB0B,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK;EAC3B;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF,CAAC,CACF;;AAED,MAAMC,MAAM,GAAGnC,YAAY,CAAC;EAC1BoC,OAAO,EAAEnC,oBAAoB,CAAC,CAAC;EAC/BO;AACF,CAAC,CAAC;AAGFV,SAAS,CAACC,GAAG,CAAC,CACXsC,GAAG,CAACF,MAAM,CAAC,CACXE,GAAG,CAACnC,KAAK,CAAC,CACVoC,KAAK,CAAC,MAAM,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}